// <auto-generated />
using System;
using EventModularMonolith.Modules.Events.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EventModularMonolith.Modules.Events.Infrastructure.Database.Migrations
{
    [DbContext(typeof(EventsDbContext))]
    [Migration("20240802235607_Create_Initial_DB")]
    partial class Create_Initial_DB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("events")
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EventModularMonolith.Modules.Events.Domain.Categories.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean")
                        .HasColumnName("is_archived");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.ToTable("categories", "events");
                });

            modelBuilder.Entity("EventModularMonolith.Modules.Events.Domain.Events.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndsAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ends_at_utc");

                    b.Property<DateTime>("StartsAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("starts_at_utc");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<Guid>("VenueId")
                        .HasColumnType("uuid")
                        .HasColumnName("venue_id");

                    b.HasKey("Id")
                        .HasName("pk_events");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_events_category_id");

                    b.HasIndex("VenueId")
                        .HasDatabaseName("ix_events_venue_id");

                    b.ToTable("events", "events");
                });

            modelBuilder.Entity("EventModularMonolith.Modules.Events.Domain.Speakers.Link", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("SpeakerId")
                        .HasColumnType("uuid")
                        .HasColumnName("speaker_id");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_links");

                    b.HasIndex("SpeakerId")
                        .HasDatabaseName("ix_links_speaker_id");

                    b.ToTable("links", "events");
                });

            modelBuilder.Entity("EventModularMonolith.Modules.Events.Domain.Speakers.Speaker", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_speakers");

                    b.ToTable("speakers", "events");
                });

            modelBuilder.Entity("EventModularMonolith.Modules.Events.Domain.TicketTypes.TicketType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("currency");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric")
                        .HasColumnName("quantity");

                    b.HasKey("Id")
                        .HasName("pk_ticket_types");

                    b.HasIndex("EventId")
                        .HasDatabaseName("ix_ticket_types_event_id");

                    b.ToTable("ticket_types", "events");
                });

            modelBuilder.Entity("EventModularMonolith.Modules.Events.Domain.Venues.Venue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_venues");

                    b.ToTable("venues", "events");
                });

            modelBuilder.Entity("EventModularMonolith.Shared.Infrastructure.Inbox.InboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("jsonb")
                        .HasColumnName("content");

                    b.Property<string>("Error")
                        .HasColumnType("text")
                        .HasColumnName("error");

                    b.Property<DateTime>("OccurredOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_on_utc");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_on_utc");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_inbox_messages");

                    b.ToTable("inbox_messages", "events");
                });

            modelBuilder.Entity("EventModularMonolith.Shared.Infrastructure.Inbox.InboxMessageConsumer", b =>
                {
                    b.Property<Guid>("InboxMessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("inbox_message_id");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("name");

                    b.HasKey("InboxMessageId", "Name")
                        .HasName("pk_inbox_message_consumers");

                    b.ToTable("inbox_message_consumers", "events");
                });

            modelBuilder.Entity("EventModularMonolith.Shared.Infrastructure.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("jsonb")
                        .HasColumnName("content");

                    b.Property<string>("Error")
                        .HasColumnType("text")
                        .HasColumnName("error");

                    b.Property<DateTime>("OccurredOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_on_utc");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_on_utc");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_outbox_messages");

                    b.ToTable("outbox_messages", "events");
                });

            modelBuilder.Entity("EventModularMonolith.Shared.Infrastructure.Outbox.OutboxMessageConsumer", b =>
                {
                    b.Property<Guid>("OutboxMessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("outbox_message_id");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("name");

                    b.HasKey("OutboxMessageId", "Name")
                        .HasName("pk_outbox_message_consumers");

                    b.ToTable("outbox_message_consumers", "events");
                });

            modelBuilder.Entity("EventSpeaker", b =>
                {
                    b.Property<Guid>("EventsId")
                        .HasColumnType("uuid")
                        .HasColumnName("events_id");

                    b.Property<Guid>("SpeakersId")
                        .HasColumnType("uuid")
                        .HasColumnName("speakers_id");

                    b.HasKey("EventsId", "SpeakersId")
                        .HasName("pk_event_speaker");

                    b.HasIndex("SpeakersId")
                        .HasDatabaseName("ix_event_speaker_speakers_id");

                    b.ToTable("event_speaker", "events");
                });

            modelBuilder.Entity("EventModularMonolith.Modules.Events.Domain.Events.Event", b =>
                {
                    b.HasOne("EventModularMonolith.Modules.Events.Domain.Categories.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_events_categories_category_id");

                    b.HasOne("EventModularMonolith.Modules.Events.Domain.Venues.Venue", null)
                        .WithMany()
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_events_venues_venue_id");
                });

            modelBuilder.Entity("EventModularMonolith.Modules.Events.Domain.Speakers.Link", b =>
                {
                    b.HasOne("EventModularMonolith.Modules.Events.Domain.Speakers.Speaker", null)
                        .WithMany("Links")
                        .HasForeignKey("SpeakerId")
                        .HasConstraintName("fk_links_speakers_speaker_id");
                });

            modelBuilder.Entity("EventModularMonolith.Modules.Events.Domain.TicketTypes.TicketType", b =>
                {
                    b.HasOne("EventModularMonolith.Modules.Events.Domain.Events.Event", null)
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ticket_types_events_event_id");
                });

            modelBuilder.Entity("EventModularMonolith.Modules.Events.Domain.Venues.Venue", b =>
                {
                    b.OwnsOne("EventModularMonolith.Modules.Events.Domain.Venues.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("VenueId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_city");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_country");

                            b1.Property<double>("Latitude")
                                .HasColumnType("double precision")
                                .HasColumnName("address_latitude");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double precision")
                                .HasColumnName("address_longitude");

                            b1.Property<string>("Region")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_region");

                            b1.Property<string>("StreetAndNumber")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_street_and_number");

                            b1.HasKey("VenueId");

                            b1.ToTable("venues", "events");

                            b1.WithOwner()
                                .HasForeignKey("VenueId")
                                .HasConstraintName("fk_venues_venues_id");
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("EventSpeaker", b =>
                {
                    b.HasOne("EventModularMonolith.Modules.Events.Domain.Events.Event", null)
                        .WithMany()
                        .HasForeignKey("EventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_event_speaker_events_events_id");

                    b.HasOne("EventModularMonolith.Modules.Events.Domain.Speakers.Speaker", null)
                        .WithMany()
                        .HasForeignKey("SpeakersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_event_speaker_speakers_speakers_id");
                });

            modelBuilder.Entity("EventModularMonolith.Modules.Events.Domain.Speakers.Speaker", b =>
                {
                    b.Navigation("Links");
                });
#pragma warning restore 612, 618
        }
    }
}
