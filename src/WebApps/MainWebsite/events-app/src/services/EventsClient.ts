//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { ClientBase } from './ClientBase';
import dayjs from 'dayjs'

export interface IClient {

    postApiTicketTypes(request: CreateTicketTypeRequest): Promise<void>;

    getApiTicketTypes(): Promise<void>;

    getApiTicketTypes2(id: string): Promise<void>;

    putApiTicketTypes(id: string, request: UpdateTicketTypePriceRequest): Promise<void>;

    deleteApiEventsCancel(id: string): Promise<void>;

    postApiEvents(request: CreateEventRequest): Promise<ResultOfGuid>;

    getEvents(): Promise<ResultOfIReadOnlyCollectionOfEventResponse>;

    getEvent(id: string): Promise<ResultOfEventResponse>;

    putApiEventsPublish(id: string): Promise<void>;

    putApiEventsReschedule(id: string, request: Request): Promise<void>;

    postApiCategories(request: CreateCategoryRequest): Promise<void>;

    getApiCategories(): Promise<void>;

    getApiCategories2(id: string): Promise<void>;

    putApiCategories(id: string, request: UpdateCategoryRequest): Promise<void>;

    getApiUsersProfile(id: string): Promise<void>;

    putApiUsersProfile(id: string, request: UpdateUserProfileRequest): Promise<void>;

    postApiUsersRegister(request: RegisterUserRequest): Promise<void>;

    putApiCartsAdd(request: Request2): Promise<void>;

    deleteApiCarts(): Promise<void>;

    getApiCarts(): Promise<void>;

    putApiCartsRemove(request: Request3): Promise<void>;
}

export class Client extends ClientBase implements IClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : window as any;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }

    postApiTicketTypes(request: CreateTicketTypeRequest): Promise<void> {
        let url_ = this.baseUrl + "/api/ticket-types";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processPostApiTicketTypes(_response));
        });
    }

    protected processPostApiTicketTypes(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    getApiTicketTypes(): Promise<void> {
        let url_ = this.baseUrl + "/api/ticket-types";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetApiTicketTypes(_response));
        });
    }

    protected processGetApiTicketTypes(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    getApiTicketTypes2(id: string): Promise<void> {
        let url_ = this.baseUrl + "/api/ticket-types/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetApiTicketTypes2(_response));
        });
    }

    protected processGetApiTicketTypes2(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    putApiTicketTypes(id: string, request: UpdateTicketTypePriceRequest): Promise<void> {
        let url_ = this.baseUrl + "/api/ticket-types/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processPutApiTicketTypes(_response));
        });
    }

    protected processPutApiTicketTypes(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    deleteApiEventsCancel(id: string): Promise<void> {
        let url_ = this.baseUrl + "/api/events/{id}/cancel";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processDeleteApiEventsCancel(_response));
        });
    }

    protected processDeleteApiEventsCancel(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    postApiEvents(request: CreateEventRequest): Promise<ResultOfGuid> {
        let url_ = this.baseUrl + "/api/events";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processPostApiEvents(_response));
        });
    }

    protected processPostApiEvents(response: Response): Promise<ResultOfGuid> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfGuid.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultOfGuid>(null as any);
    }

    getEvents(): Promise<ResultOfIReadOnlyCollectionOfEventResponse> {
        let url_ = this.baseUrl + "/api/events";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetEvents(_response));
        });
    }

    protected processGetEvents(response: Response): Promise<ResultOfIReadOnlyCollectionOfEventResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfIReadOnlyCollectionOfEventResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultOfIReadOnlyCollectionOfEventResponse>(null as any);
    }

    getEvent(id: string): Promise<ResultOfEventResponse> {
        let url_ = this.baseUrl + "/api/events/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetEvent(_response));
        });
    }

    protected processGetEvent(response: Response): Promise<ResultOfEventResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOfEventResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultOfEventResponse>(null as any);
    }

    putApiEventsPublish(id: string): Promise<void> {
        let url_ = this.baseUrl + "/api/events/{id}/publish";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "PUT",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processPutApiEventsPublish(_response));
        });
    }

    protected processPutApiEventsPublish(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    putApiEventsReschedule(id: string, request: Request): Promise<void> {
        let url_ = this.baseUrl + "/api/events/{id}/reschedule";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processPutApiEventsReschedule(_response));
        });
    }

    protected processPutApiEventsReschedule(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    postApiCategories(request: CreateCategoryRequest): Promise<void> {
        let url_ = this.baseUrl + "/api/categories";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processPostApiCategories(_response));
        });
    }

    protected processPostApiCategories(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    getApiCategories(): Promise<void> {
        let url_ = this.baseUrl + "/api/categories";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetApiCategories(_response));
        });
    }

    protected processGetApiCategories(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    getApiCategories2(id: string): Promise<void> {
        let url_ = this.baseUrl + "/api/categories/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetApiCategories2(_response));
        });
    }

    protected processGetApiCategories2(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    putApiCategories(id: string, request: UpdateCategoryRequest): Promise<void> {
        let url_ = this.baseUrl + "/api/categories/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processPutApiCategories(_response));
        });
    }

    protected processPutApiCategories(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    getApiUsersProfile(id: string): Promise<void> {
        let url_ = this.baseUrl + "/api/users/{id}/profile";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetApiUsersProfile(_response));
        });
    }

    protected processGetApiUsersProfile(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    putApiUsersProfile(id: string, request: UpdateUserProfileRequest): Promise<void> {
        let url_ = this.baseUrl + "/api/users/{id}/profile";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processPutApiUsersProfile(_response));
        });
    }

    protected processPutApiUsersProfile(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    postApiUsersRegister(request: RegisterUserRequest): Promise<void> {
        let url_ = this.baseUrl + "/api/users/register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processPostApiUsersRegister(_response));
        });
    }

    protected processPostApiUsersRegister(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    putApiCartsAdd(request: Request2): Promise<void> {
        let url_ = this.baseUrl + "/api/carts/add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processPutApiCartsAdd(_response));
        });
    }

    protected processPutApiCartsAdd(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    deleteApiCarts(): Promise<void> {
        let url_ = this.baseUrl + "/api/carts";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processDeleteApiCarts(_response));
        });
    }

    protected processDeleteApiCarts(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    getApiCarts(): Promise<void> {
        let url_ = this.baseUrl + "/api/carts";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetApiCarts(_response));
        });
    }

    protected processGetApiCarts(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    putApiCartsRemove(request: Request3): Promise<void> {
        let url_ = this.baseUrl + "/api/carts/remove";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processPutApiCartsRemove(_response));
        });
    }

    protected processPutApiCartsRemove(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class CreateTicketTypeRequest implements ICreateTicketTypeRequest {
    eventId!: string;
    name!: string;
    price!: number;
    currency!: string;
    quantity!: number;

    constructor(data?: ICreateTicketTypeRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.eventId = _data["eventId"];
            this.name = _data["name"];
            this.price = _data["price"];
            this.currency = _data["currency"];
            this.quantity = _data["quantity"];
        }
    }

    static fromJS(data: any): CreateTicketTypeRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateTicketTypeRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["eventId"] = this.eventId;
        data["name"] = this.name;
        data["price"] = this.price;
        data["currency"] = this.currency;
        data["quantity"] = this.quantity;
        return data;
    }
}

export interface ICreateTicketTypeRequest {
    eventId: string;
    name: string;
    price: number;
    currency: string;
    quantity: number;
}

export class UpdateTicketTypePriceRequest implements IUpdateTicketTypePriceRequest {
    price!: number;

    constructor(data?: IUpdateTicketTypePriceRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.price = _data["price"];
        }
    }

    static fromJS(data: any): UpdateTicketTypePriceRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateTicketTypePriceRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["price"] = this.price;
        return data;
    }
}

export interface IUpdateTicketTypePriceRequest {
    price: number;
}

export class Result implements IResult {
    isSuccess!: boolean;
    isFailure!: boolean;
    error!: ErrorDto;

    constructor(data?: IResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.isFailure = _data["isFailure"];
            this.error = _data["error"] ? ErrorDto.fromJS(_data["error"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Result {
        data = typeof data === 'object' ? data : {};
        let result = new Result();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["isFailure"] = this.isFailure;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        return data;
    }
}

export interface IResult {
    isSuccess: boolean;
    isFailure: boolean;
    error: ErrorDto;
}

export class ResultOfGuid extends Result implements IResultOfGuid {
    value!: string;

    constructor(data?: IResultOfGuid) {
        super(undefined);
		if (data) {
			for (var property in data) {
				if (data.hasOwnProperty(property))
					(<any>this)[property] = (<any>data)[property];
			}
		}
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.value = _data["value"];
        }
    }

    static override fromJS(data: any): ResultOfGuid {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfGuid();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        super.toJSON(data);
        return data;
    }
}

export interface IResultOfGuid extends IResult {
    value: string;
}

export class ErrorDto implements IErrorDto {
    code!: string;
    description!: string;
    type!: ErrorType;

    constructor(data?: IErrorDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.description = _data["description"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): ErrorDto {
        data = typeof data === 'object' ? data : {};
        let result = new ErrorDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["description"] = this.description;
        data["type"] = this.type;
        return data;
    }
}

export interface IErrorDto {
    code: string;
    description: string;
    type: ErrorType;
}

export enum ErrorType {
    Failure = 0,
    Validation = 1,
    Problem = 2,
    NotFound = 3,
    Conflict = 4,
}

export class CreateEventRequest implements ICreateEventRequest {
    categoryId!: string;
    title!: string;
    description!: string;
    location!: string;
    startsAtUtc!: dayjs.Dayjs;
    endsAtUtc!: dayjs.Dayjs | undefined;

    constructor(data?: ICreateEventRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.categoryId = _data["categoryId"];
            this.title = _data["title"];
            this.description = _data["description"];
            this.location = _data["location"];
            this.startsAtUtc = _data["startsAtUtc"] ? dayjs(_data["startsAtUtc"].toString()) : <any>undefined;
            this.endsAtUtc = _data["endsAtUtc"] ? dayjs(_data["endsAtUtc"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateEventRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateEventRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["categoryId"] = this.categoryId;
        data["title"] = this.title;
        data["description"] = this.description;
        data["location"] = this.location;
        data["startsAtUtc"] = this.startsAtUtc ? this.startsAtUtc.toISOString() : <any>undefined;
        data["endsAtUtc"] = this.endsAtUtc ? this.endsAtUtc.toISOString() : <any>undefined;
        return data;
    }
}

export interface ICreateEventRequest {
    categoryId: string;
    title: string;
    description: string;
    location: string;
    startsAtUtc: dayjs.Dayjs;
    endsAtUtc: dayjs.Dayjs | undefined;
}

export class ResultOfEventResponse extends Result implements IResultOfEventResponse {
    value!: EventResponse | undefined;

    constructor(data?: IResultOfEventResponse) {
        super(undefined);
		if (data) {
			for (var property in data) {
				if (data.hasOwnProperty(property))
					(<any>this)[property] = (<any>data)[property];
			}
		}
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.value = _data["value"] ? EventResponse.fromJS(_data["value"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): ResultOfEventResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfEventResponse();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value ? this.value.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IResultOfEventResponse extends IResult {
    value: EventResponse | undefined;
}

export class EventResponse implements IEventResponse {
    id!: string;
    categoryId!: string;
    title!: string;
    description!: string;
    location!: string;
    startsAtUtc!: dayjs.Dayjs;
    endsAtUtc!: dayjs.Dayjs | undefined;
    ticketTypes!: TicketTypeResponse[];

    constructor(data?: IEventResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.categoryId = _data["categoryId"];
            this.title = _data["title"];
            this.description = _data["description"];
            this.location = _data["location"];
            this.startsAtUtc = _data["startsAtUtc"] ? dayjs(_data["startsAtUtc"].toString()) : <any>undefined;
            this.endsAtUtc = _data["endsAtUtc"] ? dayjs(_data["endsAtUtc"].toString()) : <any>undefined;
            if (Array.isArray(_data["ticketTypes"])) {
                this.ticketTypes = [] as any;
                for (let item of _data["ticketTypes"])
                    this.ticketTypes!.push(TicketTypeResponse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): EventResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EventResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["categoryId"] = this.categoryId;
        data["title"] = this.title;
        data["description"] = this.description;
        data["location"] = this.location;
        data["startsAtUtc"] = this.startsAtUtc ? this.startsAtUtc.toISOString() : <any>undefined;
        data["endsAtUtc"] = this.endsAtUtc ? this.endsAtUtc.toISOString() : <any>undefined;
        if (Array.isArray(this.ticketTypes)) {
            data["ticketTypes"] = [];
            for (let item of this.ticketTypes)
                data["ticketTypes"].push(item.toJSON());
        }
        return data;
    }
}

export interface IEventResponse {
    id: string;
    categoryId: string;
    title: string;
    description: string;
    location: string;
    startsAtUtc: dayjs.Dayjs;
    endsAtUtc: dayjs.Dayjs | undefined;
    ticketTypes: TicketTypeResponse[];
}

export class TicketTypeResponse implements ITicketTypeResponse {
    ticketTypeId!: string;
    name!: string;
    price!: number;
    currency!: string;
    quantity!: number;

    constructor(data?: ITicketTypeResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ticketTypeId = _data["ticketTypeId"];
            this.name = _data["name"];
            this.price = _data["price"];
            this.currency = _data["currency"];
            this.quantity = _data["quantity"];
        }
    }

    static fromJS(data: any): TicketTypeResponse {
        data = typeof data === 'object' ? data : {};
        let result = new TicketTypeResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ticketTypeId"] = this.ticketTypeId;
        data["name"] = this.name;
        data["price"] = this.price;
        data["currency"] = this.currency;
        data["quantity"] = this.quantity;
        return data;
    }
}

export interface ITicketTypeResponse {
    ticketTypeId: string;
    name: string;
    price: number;
    currency: string;
    quantity: number;
}

export class ResultOfIReadOnlyCollectionOfEventResponse extends Result implements IResultOfIReadOnlyCollectionOfEventResponse {
    value!: EventResponse2[] | undefined;

    constructor(data?: IResultOfIReadOnlyCollectionOfEventResponse) {
        super(undefined);
		if (data) {
			for (var property in data) {
				if (data.hasOwnProperty(property))
					(<any>this)[property] = (<any>data)[property];
			}
		}
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["value"])) {
                this.value = [] as any;
                for (let item of _data["value"])
                    this.value!.push(EventResponse2.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): ResultOfIReadOnlyCollectionOfEventResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfIReadOnlyCollectionOfEventResponse();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.value)) {
            data["value"] = [];
            for (let item of this.value)
                data["value"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IResultOfIReadOnlyCollectionOfEventResponse extends IResult {
    value: EventResponse2[] | undefined;
}

export class EventResponse2 implements IEventResponse2 {
    id!: string;
    categoryId!: string;
    title!: string;
    description!: string;
    location!: string;
    startsAtUtc!: dayjs.Dayjs;
    endsAtUtc!: dayjs.Dayjs | undefined;

    constructor(data?: IEventResponse2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.categoryId = _data["categoryId"];
            this.title = _data["title"];
            this.description = _data["description"];
            this.location = _data["location"];
            this.startsAtUtc = _data["startsAtUtc"] ? dayjs(_data["startsAtUtc"].toString()) : <any>undefined;
            this.endsAtUtc = _data["endsAtUtc"] ? dayjs(_data["endsAtUtc"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): EventResponse2 {
        data = typeof data === 'object' ? data : {};
        let result = new EventResponse2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["categoryId"] = this.categoryId;
        data["title"] = this.title;
        data["description"] = this.description;
        data["location"] = this.location;
        data["startsAtUtc"] = this.startsAtUtc ? this.startsAtUtc.toISOString() : <any>undefined;
        data["endsAtUtc"] = this.endsAtUtc ? this.endsAtUtc.toISOString() : <any>undefined;
        return data;
    }
}

export interface IEventResponse2 {
    id: string;
    categoryId: string;
    title: string;
    description: string;
    location: string;
    startsAtUtc: dayjs.Dayjs;
    endsAtUtc: dayjs.Dayjs | undefined;
}

export class Request implements IRequest {
    startsAtUtc!: dayjs.Dayjs;
    endsAtUtc!: dayjs.Dayjs | undefined;

    constructor(data?: IRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.startsAtUtc = _data["startsAtUtc"] ? dayjs(_data["startsAtUtc"].toString()) : <any>undefined;
            this.endsAtUtc = _data["endsAtUtc"] ? dayjs(_data["endsAtUtc"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Request {
        data = typeof data === 'object' ? data : {};
        let result = new Request();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["startsAtUtc"] = this.startsAtUtc ? this.startsAtUtc.toISOString() : <any>undefined;
        data["endsAtUtc"] = this.endsAtUtc ? this.endsAtUtc.toISOString() : <any>undefined;
        return data;
    }
}

export interface IRequest {
    startsAtUtc: dayjs.Dayjs;
    endsAtUtc: dayjs.Dayjs | undefined;
}

export class CreateCategoryRequest implements ICreateCategoryRequest {
    name!: string;

    constructor(data?: ICreateCategoryRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): CreateCategoryRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCategoryRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data;
    }
}

export interface ICreateCategoryRequest {
    name: string;
}

export class UpdateCategoryRequest implements IUpdateCategoryRequest {
    name!: string;

    constructor(data?: IUpdateCategoryRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): UpdateCategoryRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCategoryRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data;
    }
}

export interface IUpdateCategoryRequest {
    name: string;
}

export class RegisterUserRequest implements IRegisterUserRequest {
    email!: string;
    password!: string;
    firstName!: string;
    lastName!: string;

    constructor(data?: IRegisterUserRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.password = _data["password"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
        }
    }

    static fromJS(data: any): RegisterUserRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterUserRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        return data;
    }
}

export interface IRegisterUserRequest {
    email: string;
    password: string;
    firstName: string;
    lastName: string;
}

export class UpdateUserProfileRequest implements IUpdateUserProfileRequest {
    firstName!: string;
    lastName!: string;

    constructor(data?: IUpdateUserProfileRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
        }
    }

    static fromJS(data: any): UpdateUserProfileRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateUserProfileRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        return data;
    }
}

export interface IUpdateUserProfileRequest {
    firstName: string;
    lastName: string;
}

export class Request2 implements IRequest2 {
    ticketTypeId!: string;
    quantity!: number;

    constructor(data?: IRequest2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ticketTypeId = _data["ticketTypeId"];
            this.quantity = _data["quantity"];
        }
    }

    static fromJS(data: any): Request2 {
        data = typeof data === 'object' ? data : {};
        let result = new Request2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ticketTypeId"] = this.ticketTypeId;
        data["quantity"] = this.quantity;
        return data;
    }
}

export interface IRequest2 {
    ticketTypeId: string;
    quantity: number;
}

export class Request3 implements IRequest3 {
    ticketTypeId!: string;

    constructor(data?: IRequest3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ticketTypeId = _data["ticketTypeId"];
        }
    }

    static fromJS(data: any): Request3 {
        data = typeof data === 'object' ? data : {};
        let result = new Request3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ticketTypeId"] = this.ticketTypeId;
        return data;
    }
}

export interface IRequest3 {
    ticketTypeId: string;
}

export class SwaggerException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    throw new SwaggerException(message, status, response, headers, result);
}
